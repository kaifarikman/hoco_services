from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import bot.db.crud.offices as crud_offices
import bot.db.crud.superusers as crud_superusers
import config


def accountant_menu_keyboard(statements, page):
    info = {
        2: "–ü–æ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤",
        3: "–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        4: "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ö–£",
        5: "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã",
        6: "–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏",
    }
    buttons = []
    static_count = 30
    ind = (page - 1) * static_count
    for _ in range(static_count):
        try:
            statement = statements[ind]
            office_id = statement.office_id
            if office_id is None:
                address = info[statement.task_type_id]
                if statement.status == 1:
                    text = f"üîµ{address}, "
                else:
                    text = f"{address}, "
                if statement.theme is None:
                    text += f"–∑–∞—è–≤–∫–∞ ‚Ññ{statement.id}"
                else:
                    text += f"{statement.theme}"
            else:
                office_id = int(office_id)
                office = crud_offices.read_office(office_id)
                if statement.status == 1:
                    text = f"üîµ{office.address}, "
                else:
                    text = f"{office.address}, "
                if statement.theme is None:
                    text += f"–æ—Ñ–∏—Å ‚Ññ{office.office_number}"
                else:
                    text += f"{statement.theme}"
            callback_data = f"accountant_statement_{statement.id}"
            button = [InlineKeyboardButton(text=text, callback_data=callback_data)]
            buttons.append(button)
        except Exception as e:
            """—Ä–∞–ª–∏–∑–∞—Ü–∏—è indexError , –¥–ª—è static_count –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –º—É—á–µ–Ω–∏–π –∏ –∏—Ñ–æ–≤"""
            pass
        ind += 1

    pages_count = len(statements) // static_count + 1
    if len(statements) % static_count == 0:
        pages_count = len(statements) // static_count

    left_page = page - 1 if page != 1 else pages_count
    right_page = page + 1 if page != pages_count else 1
    left_button = InlineKeyboardButton(
        text="‚¨ÖÔ∏è", callback_data=f"accountant_change_data_{left_page}"
    )
    middle_button = InlineKeyboardButton(
        text=f"{page} –∏–∑ {pages_count}", callback_data="dummy"
    )
    right_button = InlineKeyboardButton(
        text="‚û°Ô∏è", callback_data=f"accountant_change_data_{right_page}"
    )

    configuration_field = [left_button, middle_button, right_button]
    buttons.append(configuration_field)

    newsletter = InlineKeyboardButton(
        text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_newsletter_to_user"
    )
    archive = InlineKeyboardButton(text="–ê—Ä—Ö–∏–≤", url="https://t.me/+lRgj4g8s5NJlN2Vi")
    low_menu = [newsletter, archive]
    buttons.append(low_menu)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def statement_keyboard(statement_id, superuser_type):
    if superuser_type == 1:
        buttons = [
            [
                InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="superadmin"),
                InlineKeyboardButton(
                    text="–¢–µ–º–∞",
                    callback_data=f"accountant_select_statement_theme_{statement_id}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"complete_superadmin_{statement_id}",
                ),
                InlineKeyboardButton(
                    text="–í —Ä–∞–±–æ—Ç—É",
                    callback_data=f"accountant_hire_statement_{statement_id}",
                ),
            ],
        ]
    else:
        buttons = [
            [
                InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="accountant"),
                InlineKeyboardButton(
                    text="–¢–µ–º–∞",
                    callback_data=f"accountant_select_statement_theme_{statement_id}",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="–í —Ä–∞–±–æ—Ç—É",
                    callback_data=f"accountant_hire_statement_{statement_id}",
                ),
            ],
        ]
    buttons.append(
        [
            InlineKeyboardButton(
                text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"accountant_answer_statement_{statement_id}",
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def go_to_statement_menu(user_id, statement_id):
    menu = "accountant"
    if crud_superusers.get_superuser_role(user_id) == 1:
        menu = "superadmin"
    buttons = [
        [
            InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ",
                callback_data=f"accountant_statement_{statement_id}",
            )
        ],
        [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data=menu)],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def go_to_accountant_menu_keyboard(user_id, statement_id):
    menu = "accountant"
    if crud_superusers.get_superuser_role(user_id) == 1:
        menu = "superadmin"
    buttons = [
        [
            InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"accountant_answer_statement_{statement_id}")
        ],
        [
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data=f"accountant_statement_{statement_id}")
        ],
        [
            InlineKeyboardButton(text="–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞", callback_data=menu)
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


user_menu_buttons = [
    [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é", callback_data="start")]
]

user_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=user_menu_buttons)


def user_go_to_statements_keyboard(statement_id):
    buttons = [
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞—è–≤–∫—É", callback_data=f"my_user_statements_{statement_id}")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_statements")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
